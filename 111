/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include "big_number.h"

int main()
{
    char str[] = "-12345312312341245123412312312312";
    BigNumber* bn = CreateBN(str);
    if (bn == NULL)
        printf("bn == NULL!\n");
        
    PrintBN(bn);
    
    DeleteBN(&bn);
    
    PrintBN(bn);

    return 0;
}



// my_string.c

#include "my_string.h"

bool IsIntString(char* str_)
{
	if (str_[0] == '-')
		str_++;
	
	while(*str_)
	{
		if (*str_ < '0' || *str_ > '9')
			return false;
		
		str_++;
	}
	
	return true;
}




#include "big_number.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "my_string.h"

 BigNumber* CreateBN(char* number_)
{
	if (number_ == NULL || strlen(number_) == 0 ||
			!IsIntString(number_))
		return NULL;
	
	 BigNumber* bn = (BigNumber*)malloc(sizeof(BigNumber));
	if (bn == NULL)
		return NULL;
	
	size_t size = strlen(number_);
	if (*number_ == '-')
	{
		bn->size = size - 1;
		bn->is_negative = true;
		number_++;
	}
	else
	{
		bn->size = size;
		bn->is_negative = false;
	}
	
	bn->digits = (digit*)calloc(bn->size, sizeof(digit));
	if (bn->digits == NULL)
	{
		free(bn);
		return NULL;
	}
	
	for (size_t i = 0; i < bn->size; ++i)
		bn->digits[i] = number_[i] - '0';
	
	return bn;
}

void DeleteBN( BigNumber** bn_)
{
    free((*bn_)->digits);
    free(*bn_);
    
    *bn_ = NULL;
}

void PrintBN( BigNumber* bn_)
{
    if (bn_ == NULL)
    {
        printf("BigNumber is empty!\n");
        return;
    }
    
    if (bn_->is_negative)
        printf("-");
    
    for (size_t i = 0; i < bn_->size; ++i)
        printf("%u", bn_->digits[i]);
        
    printf("\n");
}

BigNumber* SumBN(BigNumber* bn1_, BigNumber* bn2_)
{
	char* Sumbn_ = calloc(sizeof(digit));
	if (bn_1 > bn_2)
		strcpy(Sumbn_, bn_1);
	else
		strcpy(Sumbn_, bn_2);

}

//big_number.h
#include <stdbool.h>

typedef unsigned char digit;

// Тип большого числа (>10 знаков)
typedef struct BigNumber BigNumber
{
	unsigned int size;		// Размер числа
	digit* digits;  	// Массив из цифр числа
	bool is_negative;	// Знак числа
};

/*
* @brief Создание большого числа
* @param number_ : Строка с большим числом
* @return Указатель на выделенную память с большим числом 
*/
BigNumber* CreateBN(char* number_);

/*
* @brief Удаляет выбранное большое число
* @param bn_ : Указатель на большое число
*/
void DeleteBN(BigNumber** bn_);

/*
* @brief Печать большого числа
* @param bn_ : Указатель на большое число
*/
void PrintBN(BigNumber* bn_);

/*
* @brief Сумма двух больших чисел
* @param bn1_, bn2_ : Большие числа
* @return Большое число из суммы двух входных
*/
BigNumber* SumBN(BigNumber* bn1_, BigNumber* bn2_);

//my_string.h
#include <stdbool.h>

bool IsIntString(char* str_);
